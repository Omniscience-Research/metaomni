import numpy as np
from sklearn.base import BaseEstimator, ClassifierMixin
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.utils.validation import check_X_y, check_array, check_is_fitted
from sklearn.metrics import log_loss

class RandomnessAdaptiveLRGBM(BaseEstimator, ClassifierMixin):
    def __init__(self, n_estimators=100, max_depth=3, min_samples_split=2,
                 min_samples_leaf=1, learning_rate=0.1, subsample=1.0,
                 max_features=None, random_state=None):
        self.n_estimators = n_estimators
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.min_samples_leaf = min_samples_leaf
        self.learning_rate = learning_rate
        self.subsample = subsample
        self.max_features = max_features
        self.random_state = random_state
        
    def _estimate_randomness(self, X, y):
        # Estimate randomness using log-loss of a simple model
        simple_gbm = GradientBoostingClassifier(n_estimators=10, max_depth=2,
                                                learning_rate=0.1, random_state=self.random_state)
        simple_gbm.fit(X, y)
        y_pred_proba = simple_gbm.predict_proba(X)
        return log_loss(y, y_pred_proba)
    
    def _adjust_learning_rate(self, randomness):
        # Adjust learning rate based on estimated randomness
        # Lower randomness (more structure) -> higher learning rate
        # Higher randomness -> lower learning rate
        base_lr = self.learning_rate
        adjusted_lr = base_lr * (1 - np.tanh(randomness))
        return max(0.001, min(1.0, adjusted_lr))
    
    def fit(self, X, y):
        # Check that X and y have correct shape
        X, y = check_X_y(X, y)
        
        # Estimate randomness
        randomness = self._estimate_randomness(X, y)
        
        # Adjust learning rate
        adjusted_lr = self._adjust_learning_rate(randomness)
        
        # Create and fit the GBM with adjusted learning rate
        self.gbm_ = GradientBoostingClassifier(
            n_estimators=self.n_estimators,
            max_depth=self.max_depth,
            min_samples_split=self.min_samples_split,
            min_samples_leaf=self.min_samples_leaf,
            learning_rate=adjusted_lr,
            subsample=self.subsample,
            max_features=self.max_features,
            random_state=self.random_state
        )
        
        self.gbm_.fit(X, y)
        
        # Return the classifier
        return self
    
    def predict(self, X):
        # Check is fit had been called
        check_is_fitted(self, ['gbm_'])
        
        # Input validation
        X = check_array(X)
        
        # Return predictions
        return self.gbm_.predict(X)
    
    def predict_proba(self, X):
        # Check is fit had been called
        check_is_fitted(self, ['gbm_'])
        
        # Input validation
        X = check_array(X)
        
        # Return probability estimates
        return self.gbm_.predict_proba(X)